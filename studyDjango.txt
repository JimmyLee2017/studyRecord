Daango学习
-----------------------------------
一些设置
1,要在某个目录建立一个虚拟环境，需要执行如下操作（如果有些程序已经安装则忽略即可）
	sudo apt-get install -y python-pip
	sudo pip install virtualenv
	virtualenv VENV
	srouce VENV/bin/activate
	pip install django
2,在创建了APP后，需要在setting.py的INSTALL_APPS列表中增加APP的名称。如下：
	INSTALL_APPS = [
		'django.contrib.admin',
		...
		'diango.contrib.staticfiles',
		'mainsite',
	]
3,时区修改：在setting.py得TIME_ZONE = 'Asia/Beijing'
4,其他的对应修改可以根据setting.py的内容详细了解
------------------------------------
一些命令：
1,开始一个新项目：django-admin startproject <projectName>
2,开一一个新应用：进入项目根目录下后，输入：python manage.py startadpp <appName>
3,查看一个项目的Tree，回到项目的外目录：tree <projectName>
4,启动项目服务：python manage.py runserver 127.0.0.1:8000，（当然也可以kill掉占用端口的进程，具体后面有讲，此处想知道的同学可查下 lsof 命令用法）
5,创建更改的文件：python manage.py makemigrations
6,将生成的py文件应用到数据库：python manage.py migrate
7,清空数据库：python manage.py flush，此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表
8,创建超级管理员：python manage.py createsuperuser
9,导出数据：python manage.py dumpdata appname > appname.json
10,导入数据：python manage.py loaddata appname.json
11,Django 项目环境终端：python manage.py shell，如果你安装了 bpython 或 ipython 会自动用它们的界面，推荐安装 bpython。这个命令和 直接运行 python 或 bpython 进入 shell 的区别是：你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据，还有一些小测试非常方便；
12,数据库命令行：python manage.py dbshell，Django 会自动进入在settings.py中设置的数据库，如果是 MySQL 或 postgreSQL,会要求输入数据库用户密码。在这个终端可以执行数据库的SQL语句。如果您对SQL比较熟悉，可能喜欢这种方式
13,更多命令：终端上输入 python manage.py 可以看到详细的列表，在忘记子名称的时候特别有用。
	
	
------------------------------------
一些Bug解决办法
1,Django服务启动后，提示还没有设定IP为hostName，需要到setting.py里面去的ALLOW_HOSTS加上对应的IP地址；具体如下
	ALLOWED_HOSTS = ['127.0.0.1','192.168.9.209','localhost'] 
	详情可以参考django 1.8.2的中文文档
	
-----------------------------------
一些知识点：
1,managy.py 是Django用来管理网站配置的文件，是一个接收命令行指令的工具程序，Django所有命令都是执行此程序；
2,建立好的项目文件夹里面有一个和项目名相同的的文件夹，在这里面有setting.py,urls.py,wsgi.py;
3,urls.py：用来设置每一个URL的网址要对应的函数以及对应的程序，通常是创建新的网页时需要先编辑这个文件；
4,setting.py：是此网站的系统设置所在的位置，新创建的网站都要先打开这个文件，进行编辑设置操作。
5,wsgi.py：是和虚拟主机中的网页服务器（如Apache）沟通的接口，后面有详细介绍；
6,views.py：处理用户发出的请求，从urls.py中对应过来, 通过渲染templates中的网页可以将显示内容，比如登陆后的用户名，用户请求的数据，输出到网页；
7,models.py：与数据库操作相关，存入或读取数据时用到这个，当然用不到数据库的时候 你可以不使用；
8,forms.py：表单，用户在浏览器上输入数据提交，对数据的验证工作以及输入框的生成等工作，当然你也可以不使用；
9,templates 文件夹：views.py 中的函数渲染templates中的Html模板，得到动态内容的网页，当然可以用缓存来提高速；
10,admin.py：后台，可以用很少量的代码就拥有一个强大的后台；
11,APP都单独存放在各自名字的目录下，使用这样的方式是让网站的每一个主要动能都成为一个单独的模块，方便处理，更方便这些功能模块的复用；
12,默认情况下，Django会使用SQLite存储数据库的内容，当我们使用python manage.py migrate的时候，就会产生一个叫做db.sqlite3文件，所有网站的数据都会存储在这个文件里面，这是一个简化的SQL关系数据库系统，如果要迁移网站，需要带上这个文件；
	
------------------------------
views.py相关
1,Views.py:定义视图函数（访问页面时的内容）,就是负责提供内容；
2,我们在views.py里面都会使用from django.http import HttpResponse,这个HttpResponse是用来向网页返回内容的，就像python中的print一样，只不过HttpResponse是把内容显示到网页上；
3,我们在views里面进行函数定义的时候，第一个参数必须是request，与网页发来的请求有关，request里面包含get或者post的内容，用户浏览器，系统等信息都在里面；
	
---------------------------------
urls.py
1,urls.py:定义视图函数相关的URL(网址),即规定 访问什么网址对应什么内容;
2,url(r'^add/$', calc_views.add, name='add'), 这里的 name='add' 是用来干什么的呢？简单说，name 可以用于在 templates, models, views ……中得到对应的网址，相当于“给网址取了个名字”，只要这个名字不变，网址变了也能通过名字获取到。
3,reverse 接收 url 中的 name 作为第一个参数，我们在代码中就可以通过 reverse() 来获取对应的网址（这个网址可以用来跳转，也可以用来计算相关页面的地址），只要对应的 url 的name不改，就不用改代码中的网址。在网页模板中也是一样，可以很方便的使用。
		不带参数的：
		{% url 'name' %}
		带参数的：参数可以是变量名
		{% url 'name' 参数 %}
		例如：
		<a href="{% url 'add2' 4 5 %}">link</a>
		上面的代码渲染成最终的页面是
		1
		<a href="/add/4/5/">link</a>
		这样就可以通过 {% url 'add2' 4 5 %} 获取到对应的网址 /add/4/5/
----------------------
templates
1,模板一般放在app下的templates中，Django会自动去这个文件夹中找。但 假如我们每个app的templates中都有一个 index.html，当我们在views.py中使用的时候，直接写一个 render(request, 'index.html')，Django 能不能找到当前 app 的 templates 文件夹中的 index.html 文件夹呢?（答案是不一定能，有可能找错）
Django 模板查找机制： Django 查找模板的过程是在每个 app 的 templates 文件夹中找（而不只是当前 app 中的代码只在当前的 app 的 templates 文件夹中找）。各个 app 的 templates 形成一个文件夹列表，Django 遍历这个列表，一个个文件夹进行查找，当在某一个文件夹找到的时候就停止，所有的都遍历完了还找不到指定的模板的时候就是 Template Not Found （过程类似于Python找包）。这样设计有利当然也有弊，有利是的地方是一个app可以用另一个app的模板文件，弊是有可能会找错了。所以我们使用的时候在 templates 中建立一个 app 同名的文件夹，这样就好了。
这就需要把每个app中的 templates 文件夹中再建一个 app 的名称，仅和该app相关的模板放在 app/templates/app/ 目录下面，
例如：项目 zqxt 有两个 app，分别为 tutorial 和 tryit
zqxt
├── tutorial
│   ├── __init__.py
│   ├── admin.py
│   ├── models.py
│   ├── templates
│   │   └── tutorial
│   │       ├── index.html
│   │       └── search.html
│   ├── tests.py
│   └── views.py
├── tryit
│   ├── __init__.py
│   ├── admin.py
│   ├── models.py
│   ├── templates
│   │   └── tryit
│   │       ├── index.html
│   │       └── poll.html
│   ├── tests.py
│   └── views.py
├── manage.py
└── zqxt
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
这样，使用的时候，模板就是 "tutorial/index.html" 和 "tryit/index.html" 这样有app作为名称的一部分，就不会混淆。
2,：{{ name }}叫做模版变量；{% if xx %} ，{% for x in list %}模版标签;
3，render_to_response() 的第一个参数必须是要使用的模板名称。 如果要给定第二个参数，那么该参数必须是为该模板创建 Context 时所使用的字典。 如果不提供第二个参数， render_to_response() 使用一个空字典；
4，render,渲染，说白了就是用具体参数按照要求去填充模板里面的变量的过程;
5,在for循环中的变量和描述
forloop.counter
索引从 1 开始算
forloop.counter0
索引从 0 开始算
forloop.revcounter
索引从最大长度到 1
forloop.revcounter0
索引从最大长度到 0
forloop.first
当遍历的元素为第一项时为真
forloop.last
当遍历的元素为最后一项时为真
forloop.parentloop
用在嵌套的 for 循环中，
获取上一层 for 循环的 forloop；
还可以使用 as 语句将内容取别名（相当于定义一个变量），多次使用（但视图名称到网址转换只进行了一次）
{% url 'some-url-name' arg arg2 as the_url %}
 
<a href="{{ the_url }}">链接到：{{ the_url }}</a>
------------------------
模型
1，Django 模型是与数据库相关的，与数据库相关的代码一般写在 models.py 中，Django 支持 sqlite3, MySQL, PostgreSQL等数据库，只需要在settings.py中配置即可，不用更改models.py中的代码；
2，那project和app什么关系呢？一个项目一般包含多个应用，一个应用也可以用在多个项目中；
3,变量中等字段中不能有 __（双下划线，因为在Django QuerySet API中有特殊含义（用于关系，包含，不区分大小写，以什么开头或结尾，日期的大于小于，正则等），也不能有Python中的关键字，name 是合法的，student_name 也合法，但是student__name不合法，try, class, continue 也不合法，因为它是Python的关键字( import keyword; print(keyword.kwlist) 可以打出所有的关键字)；
4,我们在model中进行class定义的时候，如果没有定义
def__str__(self):
	return self.name
那么我们在访问数据库和获取数据库中信息的时候，查询结果中显示<Person: Person object>,加上上面的语句后，则可以返回我们定义的name;
5,新建一个对象的方法有以下几种：
Person.objects.create(name=name,age=age)
p = Person(name="WZ", age=23)
p.save()
p = Person(name="TWZ")
p.age = 23
p.save()
Person.objects.get_or_create(name="WZT", age=23)
这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为Person对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.

获取对象有以下方法：
Person.objects.all()
Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存
Person.objects.get(name=name)

get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter
Person.objects.filter(name="abc")  # 等于Person.objects.filter(name__exact="abc") 名称严格等于 "abc" 的人
Person.objects.filter(name__iexact="abc")  # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件

Person.objects.filter(name__contains="abc")  # 名称中包含 "abc"的人
Person.objects.filter(name__icontains="abc")  #名称中包含 "abc"，且abc不区分大小写

Person.objects.filter(name__regex="^abc")  # 正则表达式查询
Person.objects.filter(name__iregex="^abc")  # 正则表达式不区分大小写

filter是找出满足条件的，当然也有排除符合某条件的
Person.objects.exclude(name__contains="WZ")  # 排除包含 WZ 的Person对象
Person.objects.filter(name__contains="abc").exclude(age=23)  # 找出名称含有abc, 但是排除年龄是23岁的

--------------------------
QuerySet
从数据库中查询出来的结果一般是一个集合，这个集合叫做 QuerySet
1,QuerySet 创建对象的方法
from blog.models import Blog
>>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
>>> b.save()
 
总之，一共有四种方法
# 方法 1
Author.objects.create(name="WeizhongTu", email="tuweizhong@163.com")
 
# 方法 2
twz = Author(name="WeizhongTu", email="tuweizhong@163.com")
twz.save()
 
# 方法 3
twz = Author()
twz.name="WeizhongTu"
twz.email="tuweizhong@163.com"
twz.save()
 
# 方法 4，首先尝试获取，不存在就创建，可以防止重复
Author.objects.get_or_create(name="WeizhongTu", email="tuweizhong@163.com")
# 返回值(object, True/False)
备注：前三种方法返回的都是对应的 object，最后一种方法返回的是一个元组，(object, True/False)，创建时返回 True, 已经存在时返回 False

当有一对多，多对一，或者多对多的关系的时候，先把相关的对象查询出来

>>> from blog.models import Entry
>>> entry = Entry.objects.get(pk=1)
>>> cheese_blog = Blog.objects.get(name="Cheddar Talk")
>>> entry.blog = cheese_blog
>>> entry.save()

2,获取对象的方法（上一篇的部分代码）

Person.objects.all() # 查询所有
Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存，不支持负索引，后面有相应解决办法，第7条
Person.objects.get(name="WeizhongTu") # 名称为 WeizhongTu 的一条，多条会报错
 
get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter
Person.objects.filter(name="abc") # 等于Person.objects.filter(name__exact="abc") 名称严格等于 "abc" 的人
Person.objects.filter(name__iexact="abc") # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件
 
Person.objects.filter(name__contains="abc") # 名称中包含 "abc"的人
Person.objects.filter(name__icontains="abc") #名称中包含 "abc"，且abc不区分大小写
 
Person.objects.filter(name__regex="^abc") # 正则表达式查询
Person.objects.filter(name__iregex="^abc")# 正则表达式不区分大小写
 
# filter是找出满足条件的，当然也有排除符合某条件的
Person.objects.exclude(name__contains="WZ") # 排除包含 WZ 的Person对象
Person.objects.filter(name__contains="abc").exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的;

3,删除符合条件的结果
和上面类似，得到满足条件的结果，然后 delete 就可以(危险操作，正式场合操作务必谨慎)，比如：

Person.objects.filter(name__contains="abc").delete() # 删除 名称中包含 "abc"的人
 
如果写成 
people = Person.objects.filter(name__contains="abc")
people.delete()
效果也是一样的，Django实际只执行一条 SQL 语句;

4,更新某个内容
(1) 批量更新，适用于 .all()  .filter()  .exclude() 等后面 (危险操作，正式场合操作务必谨慎)
1
2
Person.objects.filter(name__contains="abc").update(name='xxx') # 名称中包含 "abc"的人 都改成 xxx
Person.objects.all().delete() # 删除所有 Person 记录
(2) 单个 object 更新，适合于 .get(), get_or_create(), update_or_create() 等得到的 obj，和新建很类似。
twz = Author.objects.get(name="WeizhongTu")
twz.name="WeizhongTu"
twz.email="tuweizhong@163.com"
twz.save()  # 最后不要忘了保存！！！;

5, QuerySet 是可迭代的，比如：
es = Entry.objects.all()
for e in es:
    print(e.headline)
Entry.objects.all() 或者 es 就是 QuerySet 是查询所有的 Entry 条目.
注意事项：
(1). 如果只是检查 Entry 中是否有对象，应该用 Entry.objects.all().exists()
(2). QuerySet 支持切片 Entry.objects.all()[:10] 取出10条，可以节省内存
(3). 用 len(es) 可以得到Entry的数量，但是推荐用 Entry.objects.count()来查询数量，后者用的是SQL：SELECT COUNT(*)
(4). list(es) 可以强行将 QuerySet 变成 列表;

6,QuerySet 是可以用pickle序列化到硬盘再读取出来的
>>> import pickle
>>> query = pickle.loads(s)     # Assuming 's' is the pickled string.
>>> qs = MyModel.objects.all()
>>> qs.query = query            # Restore the original 'query';

7,QuerySet 查询结果排序
作者按照名称排序
Author.objects.all().order_by('name')
Author.objects.all().order_by('-name') # 在 column name 前加一个负号，可以实现倒序;

8,QuerySet 支持链式查询
Author.objects.filter(name__contains="WeizhongTu").filter(email="tuweizhong@163.com")
Author.objects.filter(name__contains="Wei").exclude(email="tuweizhong@163.com")
 
# 找出名称含有abc, 但是排除年龄是23岁的
Person.objects.filter(name__contains="abc").exclude(age=23);

9,QuerySet 不支持负索引
Person.objects.all()[:10] 切片操作，前10条
Person.objects.all()[-10:] 会报错！！！
 
# 1. 使用 reverse() 解决
Person.objects.all().reverse()[:2] # 最后两条
Person.objects.all().reverse()[0] # 最后一条
 
# 2. 使用 order_by，在栏目名（column name）前加一个负号
Author.objects.order_by('-id')[:20] # id最大的20条;

10,QuerySet 重复的问题，使用 .distinct() 去重
一般的情况下，QuerySet 中不会出来重复的，重复是很罕见的，但是当跨越多张表进行检索后，结果并到一起，可以会出来重复的值（我最近就遇到过这样的问题）
qs1 = Pathway.objects.filter(label__name='x')
qs2 = Pathway.objects.filter(reaction__name='A + B >> C')
qs3 = Pathway.objects.filter(inputer__name='WeizhongTu')
 
# 合并到一起
qs = qs1 | qs2 | qs3
这个时候就有可能出现重复的
 
# 去重方法
qs = qs.distinct()
参考：Django数据库操作官方文档： QuerySet API: https://docs.djangoproject.com/en/dev/ref/models/querysets/

10,查看 Django queryset 执行的 SQL
str(classname.objects.all().query)

11,values_list 获取元组形式结果
authors = Author.objects.values_list('name', 'qq')
authors

如果只需要 1 个字段，可以指定 flat=True
Author.objects.values_list('name', flat=True)
<QuerySet [u'WeizhongTu', u'twz915', u'wangdachui', u'xiaoming']>

查询 twz915 这个人的文章标题
Article.objects.filter(author__name='twz915').values_list('title', flat=True)


12,values 获取字典形式的结果
比如我们要获取作者的 name 和 qq
Author.objects.values('name', 'qq')

查询 twz915 这个人的文章标题
Article.objects.filter(author__name='twz915').values('title')

注意：
1. values_list 和 values 返回的并不是真正的 列表 或 字典，也是 queryset，他们也是 lazy evaluation 的（惰性评估，通俗地说，就是用的时候才真正的去数据库查）
2. 如果查询后没有使用，在数据库更新后再使用，你发现得到在是新内容！！！如果想要旧内容保持着，数据库更新后不要变，可以 list 一下
3. 如果只是遍历这些结果，没有必要 list 它们转成列表（浪费内存，数据量大的时候要更谨慎！！！）




