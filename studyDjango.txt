Daango学习
-----------------------------------
一些设置
1,要在某个目录建立一个虚拟环境，需要执行如下操作（如果有些程序已经安装则忽略即可）
	sudo apt-get install -y python-pip
	sudo pip install virtualenv
	virtualenv VENV
	srouce VENV/bin/activate
	pip install django
2,在创建了APP后，需要在setting.py的INSTALL_APPS列表中增加APP的名称。如下：
	INSTALL_APPS = [
		'django.contrib.admin',
		...
		'diango.contrib.staticfiles',
		'mainsite',
	]
3,时区修改：在setting.py得TIME_ZONE = 'Asia/Beijing'
4,其他的对应修改可以根据setting.py的内容详细了解
------------------------------------
一些命令：
1,开始一个新项目：django-admin startproject <projectName>
2,开一一个新应用：进入项目根目录下后，输入：python manage.py startadpp <appName>
3,查看一个项目的Tree，回到项目的外目录：tree <projectName>
4,启动项目服务：python manage.py runserver 127.0.0.1:8000，（当然也可以kill掉占用端口的进程，具体后面有讲，此处想知道的同学可查下 lsof 命令用法）
5,创建更改的文件：python manage.py makemigrations
6,将生成的py文件应用到数据库：python manage.py migrate
7,清空数据库：python manage.py flush，此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表
8,创建超级管理员：python manage.py createsuperuser
9,导出数据：python manage.py dumpdata appname > appname.json
10,导入数据：python manage.py loaddata appname.json
11,Django 项目环境终端：python manage.py shell，如果你安装了 bpython 或 ipython 会自动用它们的界面，推荐安装 bpython。这个命令和 直接运行 python 或 bpython 进入 shell 的区别是：你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据，还有一些小测试非常方便；
12,数据库命令行：python manage.py dbshell，Django 会自动进入在settings.py中设置的数据库，如果是 MySQL 或 postgreSQL,会要求输入数据库用户密码。在这个终端可以执行数据库的SQL语句。如果您对SQL比较熟悉，可能喜欢这种方式
13,更多命令：终端上输入 python manage.py 可以看到详细的列表，在忘记子名称的时候特别有用。
	
	
------------------------------------
一些Bug解决办法
1,Django服务启动后，提示还没有设定IP为hostName，需要到setting.py里面去的ALLOW_HOSTS加上对应的IP地址；具体如下
	ALLOWED_HOSTS = ['127.0.0.1','192.168.9.209','localhost'] 
	详情可以参考django 1.8.2的中文文档
	
-----------------------------------
一些知识点：
1,managy.py 是Django用来管理网站配置的文件，是一个接收命令行指令的工具程序，Django所有命令都是执行此程序；
2,建立好的项目文件夹里面有一个和项目名相同的的文佳佳，在这里面有setting.py,urls.py,wsgi.py;
3,urls.py：用来设置每一个URL的网址要对应的函数以及对应的程序，通常是创建新的网页时需要先编辑这个文件；
4,setting.py：是此网站的系统设置所在的位置，新创建的网站都要先打开这个文件，进行编辑设置操作。
5,wsgi.py：是和虚拟主机中的网页服务器（如Apache）沟通的接口，后面有详细介绍；
6,views.py：处理用户发出的请求，从urls.py中对应过来, 通过渲染templates中的网页可以将显示内容，比如登陆后的用户名，用户请求的数据，输出到网页；
7,models.py：与数据库操作相关，存入或读取数据时用到这个，当然用不到数据库的时候 你可以不使用；
8,forms.py：表单，用户在浏览器上输入数据提交，对数据的验证工作以及输入框的生成等工作，当然你也可以不使用；
9,templates 文件夹：views.py 中的函数渲染templates中的Html模板，得到动态内容的网页，当然可以用缓存来提高速；
10,admin.py：后台，可以用很少量的代码就拥有一个强大的后台；
11,APP都单独存放在各自名字的目录下，使用这样的方式是让网站的每一个主要动能都成为一个单独的模块，方便处理，更方便这些功能模块的复用；
12,默认情况下，Django会使用SQLite存储数据库的内容，当我们使用python manage.py migrate的时候，就会产生一个叫做db.sqlite3文件，所有网站的数据都会存储在这个文件里面，这是一个简化的SQL关系数据库系统，如果要迁移网站，需要带上这个文件；
	
------------------------------
views.py相关
1,Views.py:定义视图函数（访问页面时的内容）,就是负责提供内容；
2,我们在views.py里面都会使用from django.http import HttpResponse,这个HttpResponse是用来向网页返回内容的，就像python中的print一样，只不过HttpResponse是把内容显示到网页上；
3,我们在views里面进行函数定义的时候，第一个参数必须是request，与网页发来的请求有关，request里面包含get或者post的内容，用户浏览器，系统等信息都在里面；
	
---------------------------------
urls.py
1,urls.py:定义视图函数相关的URL(网址),即规定 访问什么网址对应什么内容;
2,url(r'^add/$', calc_views.add, name='add'), 这里的 name='add' 是用来干什么的呢？简单说，name 可以用于在 templates, models, views ……中得到对应的网址，相当于“给网址取了个名字”，只要这个名字不变，网址变了也能通过名字获取到。
3,reverse 接收 url 中的 name 作为第一个参数，我们在代码中就可以通过 reverse() 来获取对应的网址（这个网址可以用来跳转，也可以用来计算相关页面的地址），只要对应的 url 的name不改，就不用改代码中的网址。在网页模板中也是一样，可以很方便的使用。
		不带参数的：
		{% url 'name' %}
		带参数的：参数可以是变量名
		{% url 'name' 参数 %}
		例如：
		<a href="{% url 'add2' 4 5 %}">link</a>
		上面的代码渲染成最终的页面是
		1
		<a href="/add/4/5/">link</a>
		这样就可以通过 {% url 'add2' 4 5 %} 获取到对应的网址 /add/4/5/
----------------------
templates
1,模板一般放在app下的templates中，Django会自动去这个文件夹中找。但 假如我们每个app的templates中都有一个 index.html，当我们在views.py中使用的时候，直接写一个 render(request, 'index.html')，Django 能不能找到当前 app 的 templates 文件夹中的 index.html 文件夹呢?（答案是不一定能，有可能找错）
Django 模板查找机制： Django 查找模板的过程是在每个 app 的 templates 文件夹中找（而不只是当前 app 中的代码只在当前的 app 的 templates 文件夹中找）。各个 app 的 templates 形成一个文件夹列表，Django 遍历这个列表，一个个文件夹进行查找，当在某一个文件夹找到的时候就停止，所有的都遍历完了还找不到指定的模板的时候就是 Template Not Found （过程类似于Python找包）。这样设计有利当然也有弊，有利是的地方是一个app可以用另一个app的模板文件，弊是有可能会找错了。所以我们使用的时候在 templates 中建立一个 app 同名的文件夹，这样就好了。
这就需要把每个app中的 templates 文件夹中再建一个 app 的名称，仅和该app相关的模板放在 app/templates/app/ 目录下面，
例如：项目 zqxt 有两个 app，分别为 tutorial 和 tryit
zqxt
├── tutorial
│   ├── __init__.py
│   ├── admin.py
│   ├── models.py
│   ├── templates
│   │   └── tutorial
│   │       ├── index.html
│   │       └── search.html
│   ├── tests.py
│   └── views.py
├── tryit
│   ├── __init__.py
│   ├── admin.py
│   ├── models.py
│   ├── templates
│   │   └── tryit
│   │       ├── index.html
│   │       └── poll.html
│   ├── tests.py
│   └── views.py
├── manage.py
└── zqxt
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
这样，使用的时候，模板就是 "tutorial/index.html" 和 "tryit/index.html" 这样有app作为名称的一部分，就不会混淆。
