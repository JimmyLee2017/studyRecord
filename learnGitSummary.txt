Git教程(笔记--廖雪峰Git教程学习)
--创建版本库
初始化一个git仓库，使用git init命名（仓库可以新建，也可以在有内容的文件夹中处理）
mkdir xxxx
cd xxxx
git init

添加文件到git库，分两步：
1，使用命令 git add file
2，使用命令 git commit -m "备注说明"
------------------------------------ 
--查看状态和比较不同
用 git status 来查看编辑文件的状态
用 git diff 来比较修改过的内容（不同点）
------------------------------------
--查看历史版本cat
git log 查看历史记录
git log --pretty=oneline
在返回历史版本的时候,HEAD表示当前版本，HEAD^表示上一版本，HEAD^^表示上两个版本，而HEAD~100表示上一百个版本.
那么返回上一版本可以借助HEAD和git reset --hard HEAD^来操作了。
当然，也可以通过git reset --hard commit id (不需要写全，写前面几位即可）来实现过往或者后面版本的恢复来实现过往或者后面版本的恢复
关于 commit id 的 获取，如果之前的版本，可以通过git log 就可以看到，如果是之后的版本（回复到历史版本后）可以通过git reflog 来获取，这是Git 记录每一次的命令。
-------------------------------------
--工作区和暂存区
作区（Working Directory）
就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区：
版本库（Repository）
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
---------------------------------------
--管理修改
只有提交并修改的（ 执行了 git add file and git commit -m ""的才是完成的提交
提交后，可以用git diff HEAD -- file name 查看工作区和版本库里面最新版本的区别。
如果没有区别，那么就不返回任何信息。
---------------------------------------
--撤销修改
修改内容已经保存但是还没有提交，可以通过 git checkout -- file 来放弃工作区的修改。
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销。
我们通常会遇到三种情况
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；这种用 git checkout -- file
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。这种用git reset HEAD file 和  git checkout -- file

还有一种是，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？可以使用前面说到的版本回退功能，但是版本回退功能有一个限制，就是自己本地版本还没有被推送到远程版本库。

git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
------------------------------------
--删除文件
一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了
这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
现在，文件就从版本库中被删除了
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
git checkout -- test.txt
git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
-----------------------------------
--在github上面添加自己的SSHkeys
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
点“Add Key”，你就应该看到已经添加的Key：
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
-------------------------------------
--添加远程库
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
如果在github上面的文件夹里面有内容比如readme.md,那么需要先把github和本地进行同步后，再执行上传。
可以通过如下命令进行代码合并
git pull --rebase origin master

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
-------------------------------------------
---从远程库克隆
使用下列命令来克隆
git clone git@github.com:michaelliao/gitskills.git
你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
---------------------------------------------
--创建与合并分支
Master个分支的核心思想是HEAD的指向，HEAD指向Master，那么在Master上，创建分支和在分支运行的时候，HEAD指向分支，如果要合并，将Master移动到分支处，并重新指向Master即可。
创建并切换分支命令：	git checkout -b dev
-b 在这里表示创建并切换，由两个部分组成：
git branch dev
git checkout dev
查看分支命令:	git branch
有星号的表示当前分支
在分支上的提交commit操作和主分支是一样的
合并分支:	git merge 分支名
删除分支:	git branch -d 分支名
回到主分支:	git checkout master
----------------------------------------------
--解决冲突
当合并出现冲突的时候，主要的情况是分支上和主分支上提交的内容不一致导致，这个时候回到主分支，并解决掉冲突的部分，然后重新提交合并。
使用 git log --graph 可以查看分支情况，如本例中使用了
git log --graph --pretty=oneline --abbrev-commit
-----------------------------------------------
--分支合并方式	Fast forward 和 --no-ff
通常，合并分支的时候，Git 会默认用Fast forward方式进行合并，这种合并方式情况下，如果删除分支后，会丢掉分支信息。如果使用--no-ff方式，Git在合并的时候生成一个新的commit，这样，可以重分支历史上查询到分支信息。
-----------------------------------------------
--Bug分支
当我们正在一个dev分支上处理意见事情，然后忽然发现另外一个文件有一个bug，我们必须马上去解决。但是现在dev分支占据了工作区域，这个时候该怎么处理呢。可以按照如下步骤进行
1，把dev分支的工作内容先保存到 stash区域去：	git stash
2，切换到master区域：	git checkout master
3，创建一个debug分支:	git checkout -b issue101
4，在这个分支上修改bug，修改好后提交并合并:	git add xxx/git commit -m "dddddd"
5，回到主分支，合并issue101分支并删除它：	git checkout master/git merge --no-f -m "ddddddd" issue101/git branch -d issue101
6，回到dev分支：	git checkout dev
7，从stash 调出刚才临时保存进去的dev工作区内容： 注意，这里与两种方式：
a,使用git stash pop , 用这种方式，把工作区内容从stash恢复回来并在stash里面删除
b,使用git stash apply恢复，然后再用git stash drop来删除stash区域临时保存的内容
如果只有一个工作临时保存在stash区域，可以使用a方式，但是如果有多个分支临时工作保存在stash中，那么必须使用b方式了，可以先用 git stash list来查看stash区域的内容，然后通过git stash apply stash@{0} 来恢复工作，然后再git stash drop stash@{0}
----------------------------------------
--强行删除未合并过的分支
如果一个分支已经提交，但是还没有合并，使用 git branch -d 分支名 会报错，如果必须强行删除，可以使用 git branch -D 分支名
---------------------------------------
--多人协作
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
--------------------------
--创建标签
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
命令git tag可以查看所有标签。
-------------------------
--删除标签
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
------------------------------
--Github
在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。
----------------------------------
--设置多个push地址
git remote rm origin 删除原来的push地址
git remote add github git@github.com:JimmyLee2017/learngit.git 重新关联github，以后往这边的origin都用github代替
git remote add gitee git@gitee.com:JimmyLee2017/learngit.git 关联gitee，以后往这边的origin都用github代替
------------------------------------
--自定义git
让Git显示颜色，会让命令输出看起来更醒目：	git config --global color.ui true
忽略某些文件时，需要编写.gitignore
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
注意建立好gitignore文件后，最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean
st就表示status：	git config --global alias.st status
GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。
搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。
假设你已经有sudo权限的用户账号，下面，正式开始安装。
第一步，安装git：
$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git
第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git
第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。
管理公钥
如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。








 